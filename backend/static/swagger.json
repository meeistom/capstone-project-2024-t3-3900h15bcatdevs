{
  "openapi": "3.0.3",
  "info": {
    "title": "Milk Guard",
    "description": "This is the API docs for Milk Guard.\n\n## ❗ ️Info on Data\nFor more information checkout the database schema in ```firebase/firestore-data.md```\n\n## Dummy Data\nTo add dummy data or clear data from the database, uncomment/run the appropriate functions in ```backend/firebase/db_control.py```.\n\n```\nif __name__ == '__main__':\n    # clear_collection(fs_client, \"mothers\")\n    # clear_collection(fs_client, \"babies\")\n    # clear_collection(fs_client, \"milk_entries\")\n\n    add_dummy_data(fs_client, \"mothers\", \"./firebase/data/mother_details.json\")\n    add_dummy_data(fs_client, \"babies\", \"./firebase/data/baby_details.json\")\n    add_dummy_data(fs_client, \"milk_entries\", \"./firebase/data/bottle_details.json\")\n```\n## ❗ ️Disclaimer\nThe example responses are not indicative of what is in the database. It is purely a template of what the object should look like. If any questions arise or something if not correct, feel free to reach out to Aolin",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:5001"
    }
  ],
  "tags": [
    {
      "name": "home",
      "description": "API endpoint related to home page of \"milk_entries\" object"
    },
    {
      "name": "mothers",
      "description": "API endpoints related to \"mothers\" collection"
    },
    {
      "name": "babies",
      "description": "API endpoints related to \"babies\" collection"
    },
    {
      "name": "milk_entries",
      "description": "API endpoints related to \"milk_entries\" collection"
    },
    {
      "name": "milk_label",
      "description": "API endpoint related to milk preview page of \"label\""
    },
    {
      "name": "verify",
      "description": "API endpoints related to verfication"
    },
    {
      "name": "notifications",
      "description": "API endpoints related to notifications"
    }
  ],
  "paths": {
    "/home": {
      "get": {
        "tags": [
          "home"
        ],
        "summary": "Displays the formated homepage.",
        "description": "Returns a formated milk_entries object with mother and baby mrn and name",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Home"
                },
                "example": {
                  "baby_mrn": "0000",
                  "baby_name": "Mei Lin",
                  "created_at": 1730866439,
                  "expiration_time": 1730866500,
                  "express_time": 1730866380,
                  "extra_notes": "",
                  "milk_type": "ehm",
                  "mother_mrn": "0000",
                  "mother_name": "Hong Lin",
                  "storage_location": "level 1",
                  "storage_type": "fridge",
                  "uid": "000028",
                  "volume_ml": 50
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/mothers": {
      "get": {
        "tags": [
          "mothers"
        ],
        "summary": "Gets all mothers or a specific mother",
        "description": "If no parameters are provided, a list of all mother objects are returned. To find a specific mother, provide mother MRN",
        "parameters": [
          {
            "in": "query",
            "name": "mrn",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mothers"
                },
                "example": {
                  "babies": [
                    "0000"
                  ],
                  "first_name": "Hong",
                  "last_name": "Lin",
                  "mrn": "0000",
                  "milks": [
                    "000002",
                    "000009"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/add_mother": {
      "post": {
        "tags": [
          "mothers"
        ],
        "summary": "Registers a new mother",
        "description": "Registers a new mother with the provided MRN, first and last name.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Mothers"
              },
              "example": {
                "first_name": "Hong",
                "last_name": "Lin",
                "mrn": "0000",
                "babies": [
                  "0000"
                ],
                "milks": [
                  "000002",
                  "000009"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/delete_mother": {
      "delete": {
        "tags": [
          "mothers"
        ],
        "summary": "Deletes mother",
        "description": "Deletes mother with the provided MRN",
        "parameters": [
          {
            "in": "query",
            "name": "mrn",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/babies": {
      "get": {
        "tags": [
          "babies"
        ],
        "summary": "Gets all babies or a specific baby",
        "description": "If no parameters are provided, a list of all babies objects are returned. To find a specific baby, provide their MRN.",
        "parameters": [
          {
            "in": "query",
            "name": "mrn",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mothers"
                },
                "example": {
                  "first_name": "Mei",
                  "last_name": "Lin",
                  "mother_mrn": "0000",
                  "mother_name": "Hong Lin",
                  "mrn": "0000"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/add_baby": {
      "post": {
        "tags": [
          "babies"
        ],
        "summary": "Registers a new baby",
        "description": "Registers a new baby with the provided baby MRN, first and last name and mother's MRN.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Babies"
              },
              "example": {
                "first_name": "Mei",
                "last_name": "Lin",
                "mother_mrn": "0000",
                "mother_name": "Hong Lin",
                "mrn": "0000"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/delete_baby": {
      "delete": {
        "tags": [
          "babies"
        ],
        "summary": "Deletes baby",
        "description": "Deletes baby with the provided MRN",
        "parameters": [
          {
            "in": "query",
            "name": "mrn",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/milk_entries": {
      "get": {
        "tags": [
          "milk_entries"
        ],
        "summary": "Gets all milk entries in order or a specific milk entry (default order is descending)",
        "description": "If no parameters are provided, a list of all milk entry objects are returned in descending order by \"created_at\". To find a specific milk entry, provide the UID.",
        "parameters": [
          {
            "in": "query",
            "name": "uid",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mothers"
                },
                "example": {
                  "baby_mrn": "0000",
                  "created_at": 1730782424,
                  "expiration_time": 1731041580,
                  "express_time": 1730782380,
                  "extra_notes": "",
                  "milk_type": "ehm",
                  "mother_mrn": "0000",
                  "storage_location": "level 1",
                  "storage_type": "fridge",
                  "uid": "555555",
                  "volume_ml": 50
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/add_milk_entry": {
      "post": {
        "tags": [
          "milk_entries"
        ],
        "summary": "Registers a new milk entry",
        "description": "Registers a new milk entry with the provided milk UID, milk type, express time, expiration time, storage type, storage location, volume, baby mrn, and optional notes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Milks"
              },
              "example": {
                "baby_mrn": "0000",
                "created_at": 1730782424,
                "expiration_time": 1731041580,
                "express_time": 1730782380,
                "extra_notes": "",
                "milk_type": "ehm",
                "mother_mrn": "0000",
                "storage_location": "level 1",
                "storage_type": "fridge",
                "uid": "555555",
                "volume_ml": 50
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/delete_milk_entry": {
      "delete": {
        "tags": [
          "milk_entries"
        ],
        "summary": "Deletes milk entry",
        "description": "Deletes milk entry with the provided UID",
        "parameters": [
          {
            "in": "query",
            "name": "uid",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/verify": {
      "get": {
        "tags": [
          "verify"
        ],
        "summary": "Verify the existence of a barcode in the database",
        "description": "Verifies if a given barcode (mrn or uid) exists in the database and returns details about the item, including information from related collections such as mothers, milks, or babies.",
        "parameters": [
          {
            "in": "query",
            "name": "barcode",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Mothers"
                    },
                    {
                      "$ref": "#/components/schemas/Milks"
                    },
                    {
                      "$ref": "#/components/schemas/Babies"
                    }
                  ]
                },
                "example": {
                  "babies": [
                    "9172"
                  ],
                  "first_name": "Rachele",
                  "last_name": "Sandbatch",
                  "mrn": "2667",
                  "milks": [
                    "000002",
                    "000009"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/verify_feed": {
      "get": {
        "tags": [
          "verify"
        ],
        "summary": "Verifies the feed",
        "description": "Verifies the association between a specified milk UID and a baby MRN to ensure a correct feed. Returns detailed information about the milk and baby if the provided identifiers match and the milk is not expired.",
        "parameters": [
          {
            "in": "query",
            "name": "milk_uid",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "baby_mrn",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "milk_details": {
                      "$ref": "#/components/schemas/Milks"
                    },
                    "baby_details": {
                      "$ref": "#/components/schemas/Babies"
                    }
                  },
                  "required": [
                    "milk_details",
                    "baby_details"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/notifications": {
      "get": {
        "tags": [
          "notifications"
        ],
        "summary": "Gets notifications on milk entries",
        "description": "Gets the notifications on milk entries that are close to expiring or expired",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notification"
                },
                "example": {
                  "baby_name": "Mei Lin",
                  "days_expiry": -977,
                  "expiration_timestamp": 1646410000,
                  "expired": true,
                  "hours_expiry": -17,
                  "minutes_expiry": -1406895,
                  "mother_name": "Hong Lin",
                  "uid": "555555"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/preview_milk_label": {
      "get": {
        "tags": [
          "milk_label"
        ],
        "summary": "Preview milk label",
        "description": "Gets the milk label with provided milk uid",
        "parameters": [
          {
            "in": "query",
            "name": "uid",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "html": {
                    "value": "<div class=\"milk-label\" style=\"display: flex; gap: 10px; font-family: monospace;\">\n<div style=\"display: flex; flex-direction: column;\">\n<div class=\"info\">\n<p>Holyard</p>\n<p>b/o Gianina</p>\n<p>MRN 1215</p>\n<p>Initial 1_____ Initial 2_____</p>\n</div>\n<div>\n<?xml version=\"1.0\" encoding=\"utf-8\" ?><svg baseProfile=\"tiny\" version=\"1.2\" height=\"48px\" width=\"48px\" viewBox=\"0 0 12 12\" style=\"background-color:#FFF\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:ev=\"http://www.w3.org/2001/xml-events\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><path d=\"M1,1.5 h1m1,0h1m1,0h1m1,0h1m1,0h1m1,0m-10,1h2m2,0h1m1,0h4m-10,1h1m4,0h2m3,0m-10,1h1m1,0h1m2,0h1m1,0h1m1,0h1m-10,1h1m1,0h2m2,0h1m3,0m-10,1h1m2,0h2m3,0h2m-10,1h1m1,0h1m2,0h2m1,0h1m1,0m-10,1h2m1,0h1m2,0h1m2,0h1m-10,1h3m1,0h2m4,0m-10,1h10m-10,1\" stroke=\"#000\" stroke-width=\"1\"/></svg><p>000024</p>\n</div>\n</div>\n<div class=\"info\">\n<p>EHM/PDHM    expressed/defrosted</p>\n<p>PDHM batch#__________________________________</p>\n<p>        date____________time____________am/pm</p>\n<p>expired date____________time____________am/pm</p>\n<p>Humavant 6/Cream/HMF</p>\n<p>Humavant batch#______________________________</p>\n<p>expired date____________time____________am/pm</p>\n</div>\n</div>\n"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Mothers": {
        "type": "object",
        "properties": {
          "babies": {
            "type": "array",
            "description": "List of babies full names",
            "items": {
              "type": "string"
            }
          },
          "first_name": {
            "type": "string",
            "description": "Mother's first name"
          },
          "last_name": {
            "type": "string",
            "description": "Mother's last name"
          },
          "mrn": {
            "type": "string",
            "description": "Mother's mrn"
          },
          "milks": {
            "type": "array",
            "description": "List of milks identifiers",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Babies": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "description": "Baby's first name"
          },
          "last_name": {
            "type": "string",
            "description": "Baby's last name"
          },
          "mother_mrn": {
            "type": "string",
            "description": "Mother's mrn"
          },
          "mother_name": {
            "type": "string",
            "description": "Mother's full name"
          },
          "mrn": {
            "type": "string",
            "description": "Baby's mrn"
          }
        }
      },
      "Milks": {
        "type": "object",
        "properties": {
          "baby_mrn": {
            "type": "string",
            "description": "Baby's mrn"
          },
          "created_at": {
            "type": "integer",
            "description": "Timestamp indicating when the record was created (in Unix time)"
          },
          "expiration_time": {
            "type": "integer",
            "description": "Expiration time of the milk (in Unix time)"
          },
          "express_time": {
            "type": "integer",
            "description": "Time when the milk was expressed (in Unix time)"
          },
          "extra_notes": {
            "type": "string",
            "description": "Additional notes or special instructions related to the milk"
          },
          "milk_type": {
            "type": "string",
            "description": "Type of milk"
          },
          "mother_mrn": {
            "type": "string",
            "description": "Mother's mrn"
          },
          "storage_location": {
            "type": "string",
            "description": "Location where the milk is stored (e.g., room 1)"
          },
          "storage_type": {
            "type": "string",
            "description": "Type where the milk is stored (e.g., fridge, freezer)"
          },
          "uid": {
            "type": "string",
            "description": "Unique identifier for the milk entry"
          },
          "volume_ml": {
            "type": "integer",
            "description": "Volume of milk in milliliters"
          }
        }
      },
      "Notification": {
        "type": "object",
        "properties": {
          "baby_name": {
            "type": "string",
            "description": "Baby's full name"
          },
          "days_expiry": {
            "type": "integer",
            "description": "Number of days until the milk expires. Negative values indicates how long the milk has already expired for"
          },
          "expiration_timestamp": {
            "type": "integer",
            "description": "Unix timestamp of when the milk will expire."
          },
          "expired": {
            "type": "boolean",
            "description": "Indicates whether the milk has already expired."
          },
          "hours_expiry": {
            "type": "integer",
            "description": "Number of hours until the milk expires. Negative values indicates how long the milk has already expired for"
          },
          "minutes_expiry": {
            "type": "integer",
            "description": "Number of minutes until the milk expires. Negative values indicates how long the milk has already expired for"
          },
          "mother_name": {
            "type": "string",
            "description": "Mother's full name"
          },
          "uid": {
            "type": "string",
            "description": "Unique identifier for the milk entry."
          }
        }
      },
      "Home": {
        "type": "object",
        "properties": {
          "baby_mrn": {
            "type": "string",
            "description": "Unique identifier for the milk entry."
          },
          "baby_name": {
            "type": "string",
            "description": "Full name of the baby."
          },
          "created_at": {
            "type": "integer",
            "format": "unix-time",
            "description": "Timestamp of when the entry was created."
          },
          "expiration_time": {
            "type": "integer",
            "format": "unix-time",
            "description": "Timestamp of when the milk will expire."
          },
          "express_time": {
            "type": "integer",
            "format": "unix-time",
            "description": "Timestamp of when the milk was expressed."
          },
          "extra_notes": {
            "type": "string",
            "description": "Additional notes about the milk entry, if any."
          },
          "milk_type": {
            "type": "string",
            "description": "Type of milk."
          },
          "mother_mrn": {
            "type": "string",
            "description": "Full name of the mother."
          },
          "mother_name": {
            "type": "string",
            "description": "Full name of the mother."
          },
          "storage_location": {
            "type": "string",
            "description": "Physical location of the milk storage."
          },
          "storage_type": {
            "type": "string",
            "description": "Storage type, e.g., fridge or freezer."
          },
          "uid": {
            "type": "integer",
            "description": "."
          },
          "volume_ml": {
            "type": "integer",
            "description": "Volume of the milk in milliliters."
          }
        }
      }
    }
  }
}