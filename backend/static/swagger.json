{
  "openapi": "3.0.3",
  "info": {
    "title": "Milk Guard",
    "description": "This is the API docs for Milk Guard.\n\n## ❗ ️Info on Data\nData Structure/Schema/Layout in ```firebase/firestore-data.md```\n\n## Dummy Data\nTo add dummy data or clear data from the database, uncomment/run the appropriate functions in ```backend/firebase/db_control.py```.\n\n```\nif __name__ == '__main__':\n    # clear_collection(fs_client, \"mothers\")\n    # clear_collection(fs_client, \"babies\")\n    # clear_collection(fs_client, \"milk_entries\")\n\n    add_dummy_data(fs_client, \"mothers\", \"./firebase/data/mother_details.json\")\n    add_dummy_data(fs_client, \"babies\", \"./firebase/data/baby_details.json\")\n    add_dummy_data(fs_client, \"milk_entries\", \"./firebase/data/bottle_details.json\")\n```",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:5001"
    }
  ],
  "tags": [
    {
      "name": "mothers",
      "description": "Get mothers by name or MRN"
    },
    {
      "name": "babies",
      "description": "Get babies by MRN"
    },
    {
      "name": "milk_entries",
      "description": "Get milk entries in order"
    },
    {
      "name": "home",
      "description": "Get table information for home page."
    },
    {
      "name": "search",
      "description": "Search database with a keyword"
    },
    {
      "name": "verify",
      "description": "Verification of barcode and feeds"
    },
    {
      "name": "notifications",
      "description": "Provides latest notifications update on statuses of all milks"
    }
  ],
  "paths": {
    "/home": {
      "get": {
        "tags": ["home"],
        "summary": "Gets milk entries with mother and baby names for the home page.",
        "description": "Gets all milk entries, then adds mother and baby names to each milk entry. Number of reads = \\# mothers + \\# babies.",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "400": {
            "description": "Failed to get entries"
          }
        }
      }
    },
    "/mothers": {
      "get": {
        "tags": ["mothers"],
        "summary": "Gets list of all mothers",
        "description": "Gets list of all mothers.",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          }
        }
      }
    },
    "/mothers/{mrn}": {
      "get": {
        "tags": ["mothers"],
        "summary": "Gets mother by MRN",
        "description": "Gets mother by MRN.",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "400": {
            "description": "Mother MRN not found"
          }
        }
      }
    },
    "/mothers/{first_name}": {
      "get": {
        "tags": ["mothers"],
        "summary": "Gets mother by first name",
        "description": "Gets mother by first name.",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "400": {
            "description": "No mothers registered"
          }
        }
      }
    },
    "/mothers/{last_name}": {
      "get": {
        "tags": ["mothers"],
        "summary": "Gets mother by first name",
        "description": "Gets mother by first name.",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "400": {
            "description": "No mothers registered"
          }
        }
      }
    },
    "/babies": {
      "get": {
        "tags": ["babies"],
        "summary": "Gets list of all babies",
        "description": "Gets list of all babies.",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          }
        }
      }
    },
    "/babies/{mrn}": {
      "get": {
        "tags": ["babies"],
        "summary": "Gets baby by MRN",
        "description": "Gets baby by MRN.",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "400": {
            "description": "Baby MRN not found"
          }
        }
      }
    },
    "/milk_entries": {
      "get": {
        "tags": ["milk_entries"],
        "summary": "Gets milk entries",
        "description": "Gets milk entries.",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "400": {
            "description": "No Milk Entries Registered"
          }
        }
      }
    },
    "/milk_entries/{uid}": {
      "get": {
        "tags": ["milk_entries"],
        "summary": "Gets milk entries by UID",
        "description": "Gets milk entries by UID.",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "400": {
            "description": "Milk Entry UID not found!"
          }
        }
      }
    },
    "/search": {
      "get": {
        "tags": ["search"],
        "summary": "Fetches matching items in database with keywords",
        "description": "Fetches matching items in database with keywords.",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "400": {
            "description": "No matches with the keyword"
          }
        }
      }
    },
    "/add_mother": {
      "post": {
        "tags": ["mothers"],
        "summary": "Registers a new mother",
        "description": "Registers a new mother with MRN, first and last name.",
        "operationId": "addMother",
        "parameters": [
          {
            "name": "mrn",
            "in": "query",
            "description": "MRN of mother that is being registered",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "first_name",
            "in": "query",
            "description": "First name of mother that is being registered",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "last_name",
            "in": "query",
            "description": "Last name of mother that is being registered",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added baby"
          },
          "400": {
            "description": "Invalid mother data, Mother already exists"
          }
        }
      }
    },
    "/add_baby": {
      "post": {
        "tags": ["babies"],
        "summary": "Registers a new baby",
        "description": "Registers a new baby with MRN, mother MRN, first and last name.",
        "operationId": "addBaby",
        "parameters": [
          {
            "name": "mrn",
            "in": "query",
            "description": "MRN of baby that is being registered",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "mother_mrn",
            "in": "query",
            "description": "MRN of mother that is being registered",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "first_name",
            "in": "query",
            "description": "First name of mother that is being registered",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "last_name",
            "in": "query",
            "description": "Last name of mother that is being registered",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added mother"
          },
          "400": {
            "description": "Invalid baby data, Mother does not exist, Baby already exists"
          }
        }
      }
    },
    "/add_milk_entry": {
      "post": {
        "tags": ["milk_entries"],
        "summary": "Adds a new milk entry",
        "description": "Registers a new baby with MRN, mother MRN, first and last name.",
        "operationId": "addMilk",
        "parameters": [
          {
            "name": "milk_type",
            "in": "query",
            "description": "Type of milk being registered",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "express_time",
            "in": "query",
            "description": "Express time of milk being registered",
            "required": true,
            "schema": {
              "type": "string",
              "format": "unix timestamp"
            }
          },
          {
            "name": "expiration_time",
            "in": "query",
            "description": "Expiration time of milk being registered",
            "required": true,
            "schema": {
              "type": "string",
              "format": "unix timestamp"
            }
          },
          {
            "name": "storage_type",
            "in": "query",
            "description": "Storage type of milk being registered",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storage_location",
            "in": "query",
            "description": "Storage location of milk being registered",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "volume_ml",
            "in": "query",
            "description": "Volume(ml) of milk being registered",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "baby_mrn",
            "in": "query",
            "description": "MRN of milk's baby",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "extra_notes",
            "in": "query",
            "description": "Additional notes of milk",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added milk"
          },
          "400": {
            "description": "Invalid milk entry data, Baby does not exist, Stats document error, A firebase error occurred"
          }
        }
      }
    },
    "/delete_mother": {
      "delete": {
        "tags": ["mothers"],
        "summary": "Deletes a mother",
        "description": "Deletes a mother",
        "operationId": "deleteMother",
        "parameters": [
          {
            "name": "mrn",
            "in": "path",
            "description": "MRN of mother to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted document"
          },
          "500": {
            "description": "No MRN/UID given, MRN/UID {mrn} does not exist in collection mothers, Failed to delete document"
          }
        }
      }
    },
    "/delete_baby": {
      "delete": {
        "tags": ["babies"],
        "summary": "Deletes a baby",
        "description": "Deletes a baby",
        "operationId": "deleteBaby",
        "parameters": [
          {
            "name": "mrn",
            "in": "path",
            "description": "MRN of baby to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted document"
          },
          "500": {
            "description": "No MRN/UID given, MRN/UID {mrn} does not exist in collection babies, Failed to delete document"
          }
        }
      }
    },
    "/delete_milk_entry": {
      "delete": {
        "tags": ["milk_entries"],
        "summary": "Deletes a milk entry",
        "description": "Deletes a milk entry",
        "operationId": "deleteMilk",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "description": "uid of milk bottle to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted document"
          },
          "500": {
            "description": "No MRN/UID given, MRN/UID {uid} does not exist in collection milk_entries, Failed to delete document"
          }
        }
      }
    },
    "/verify": {
      "get": {
        "tags": ["verify"],
        "summary": "Verify the existence of a scanned barcode in the database",
        "description": "Verify the existence of a scanned barcode in the database",
        "parameters": [
          {
            "name": "barcode",
            "in": "path",
            "description": "barcode to be verified",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "404": {
            "description": "Invalid request. No inputs given"
          }
        }
      }
    },
    "/verify_feed": {
      "get": {
        "tags": ["verify"],
        "summary": "Verifies feed",
        "description": "Verify that the specified milk UID belongs to the specified baby MRN.",
        "parameters": [
          {
            "name": "milk_uid",
            "in": "path",
            "description": "Milk to be verified",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "baby_mrn",
            "in": "path",
            "description": "Baby to be verified with the milk",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Incorrect inputs given"
          },
          "404": {
            "description": "Invalid milk barcode, Invalid baby barcode"
          }
        }
      }
    },
    "/notifications": {
      "get": {
        "tags": ["notifications"],
        "summary": "Fetches latest notifications",
        "description": "Fetches latest notifications.",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "petId": {
            "type": "integer",
            "format": "int64",
            "example": 198772
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "example": 7
          },
          "shipDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Order Status",
            "example": "approved",
            "enum": ["placed", "approved", "delivered"]
          },
          "complete": {
            "type": "boolean"
          }
        },
        "xml": {
          "name": "order"
        }
      },
      "Customer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 100000
          },
          "username": {
            "type": "string",
            "example": "fehguy"
          },
          "address": {
            "type": "array",
            "xml": {
              "name": "addresses",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          }
        },
        "xml": {
          "name": "customer"
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "street": {
            "type": "string",
            "example": "437 Lytton"
          },
          "city": {
            "type": "string",
            "example": "Palo Alto"
          },
          "state": {
            "type": "string",
            "example": "CA"
          },
          "zip": {
            "type": "string",
            "example": "94301"
          }
        },
        "xml": {
          "name": "address"
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Dogs"
          }
        },
        "xml": {
          "name": "category"
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "username": {
            "type": "string",
            "example": "theUser"
          },
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "James"
          },
          "email": {
            "type": "string",
            "example": "john@email.com"
          },
          "password": {
            "type": "string",
            "example": "12345"
          },
          "phone": {
            "type": "string",
            "example": "12345"
          },
          "userStatus": {
            "type": "integer",
            "description": "User Status",
            "format": "int32",
            "example": 1
          }
        },
        "xml": {
          "name": "user"
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "tag"
        }
      },
      "Pet": {
        "required": ["name", "photoUrls"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "name": {
            "type": "string",
            "example": "doggie"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "photoUrls": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "type": "string",
              "xml": {
                "name": "photoUrl"
              }
            }
          },
          "tags": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "status": {
            "type": "string",
            "description": "pet status in the store",
            "enum": ["available", "pending", "sold"]
          }
        },
        "xml": {
          "name": "pet"
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "xml": {
          "name": "##default"
        }
      }
    },
    "requestBodies": {
      "Pet": {
        "description": "Pet object that needs to be added to the store",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          }
        }
      },
      "UserArray": {
        "description": "List of user object",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "petstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://petstore3.swagger.io/oauth/authorize",
            "scopes": {
              "write:pets": "modify pets in your account",
              "read:pets": "read your pets"
            }
          }
        }
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    }
  }
}
